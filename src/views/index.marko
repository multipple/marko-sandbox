
<!-- StyleSheets -->
import 'boxicons/css/boxicons.min.css'
import '~/css/bootstrap.css'
import '~/css/bootstrap-extended.css'
import '~/css/colors.css'
import '~/css/components.css'
import '~/css/style.helper.css'
import '~/css/style.custom.css'
import '~/css/animate.css'

import TestManager from './../lib/TestManager'

class {
  onCreate(){
    this.state = { extinput: null }
    GState.bind(this, ['theme', 'running'])
    
    this.adaptiveThemeType()
    this.adaptiveThemeMode()

    this.onOutputEvent = () => {}
  }
  onMount(){ this.handleTest() }
  adaptiveThemeType(){
    // Apply change of theme type (smoothy~1.0) or theme color
    async function apply( name, color ){
      await import(`themes/${name}/theme/${color}/light`)
      await import(`themes/${name}/theme/${color}/dark`)
    }

    // Initialized
    this.currentTheme = this.state.theme
    this.currentTheme && apply( this.currentTheme.name, this.currentTheme.color )

    GState.on( 'theme', async theme => {
      const { name, color, mode } = theme
      if( this.currentTheme 
          && this.currentTheme.name === name 
          && this.currentTheme.color != color ) return

      await apply( name, color )

      this.currentTheme = theme
    } )
  }
  adaptiveThemeMode(){
    // Check user OS X & Browser preference
    const themeMedia = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)')

    if( !this.state.theme ){
      // Adapt theme mode to browser
      if( !themeMedia )
        return GState.theme.mode('light') // Force `light` to `auto`
      
      // Dark mode as preference check point
      GState.theme.mode( themeMedia.matches ? 'dark' : 'light' )
    }

    // Monitor platform (OS) theme preference change
    themeMedia.addEventListener( 'change', e => !this.state.theme && GState.theme.mode( e.matches ? 'dark' : 'light' ) )
  }
  handleTest(){
    // Create, load and manager test process
    this.TestManifest = require('test/manifest.json')
    let tm = false
    
    window.iof
    // Fetch and send available test manifest to emulator
    .on( 'get:tests', fn => typeof fn == 'function' && fn( false, this.TestManifest ) )
    .on( 'test:start', async ( type, fn ) => {

      if( !this.TestManifest ){
        typeof fn == 'function' && fn('Test manifest not found')
        return
      }

      // Start new test kit
      tm = new TestManager()
      // Load specified test kit
      await tm.load( this.TestManifest[ type ].path )

      // Pipe to text manager to get test input as a new run start
      tm.pipe( extinput => this.state.extinput = extinput )
      // Get occured output events from extension
      this.onOutputEvent = tm.event

      // Send loaded test registry back to emulator control
      typeof fn == 'function' && fn( false, tm.Registry )
    } )
    .on( 'test:stop', async ( type, fn ) => {

      if( !this.TestManifest ){
        typeof fn == 'function' && fn('Test manifest not found')
        return
      }

      tm = false
      typeof fn == 'function' && fn( false )
    } )
    .on( 'test:run', async ( idList, fn ) => {
      // Run a bulk list of test sessions with tracking function callback
      fn = typeof fn == 'function' ? fn : () => {}

      if( !tm )
        return fn('No started test found')
      
      if( !Array.isArray( idList ) )
        return fn('Invalid session list')
      
      if( !idList.length )
        return fn('Cannot run empty session list')

      /* Running progress tracking are send by 
        independant emits since `fn` argument is 
        one time callable function
      */
      for( let x in idList ){
        const id = idList[ x ]
        
        try {
          window.iof.emit( 'test:progress', { id, status: 'RUNNING' } )
          // Start session
          await tm.run( id )
          // Send end session status
          window.iof.emit( 'test:progress', { id, status: 'SUCCEED' } )
        }
        catch( error ){
          window.iof.emit( 'test:progress', { id, status: 'FAILED', error: error.message } )
        }
      }
      
      fn() // Test End
    } )
    .on( 'test:runall', () => tm && tm.runAll() )
  }
}

<div class=`th--${state.theme.mode}`>
  <div.vw-100.vh-100.theme-bg.overflow-auto>
    <if( state.running )>
      <Extension name=input.name 
                ...state.extinput
                debug
                on-test-event( component.onOutputEvent )/>
    </if>
    <else>
      Installing ...
    </else>
  </div>
</div>